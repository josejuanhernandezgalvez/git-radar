{"name": "test.java","code": "package com.builder;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.builder.requestHandler.WordContextDTO;\nimport com.builder.requestHandler.WordContextDTOProcessor;\nimport com.builder.utils.TokenizedCodeDeserializer;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class LambdaFunctionHandler implements RequestHandler<Map<String, Object>, String> {\n    private static final int MaxWindowSize = 25;\n    private static final S3Service S3_SERVICE = new S3Service();\n    TokenWebService tokenWebService = new TokenWebService();\n    private static final TokenizedCodeDeserializer tokenizedCodeDeserializer = new TokenizedCodeDeserializer();\n\n    @Override\n    public String handleRequest(Map<String, Object> event, Context context) {\n        ArrayList<String> tokenizedCode = tokenizedCodeFor(event);\n        for (int windowSize = 1; windowSize <MaxWindowSize; windowSize++)\n            processFor(windowSize, tokenizedCode);\n        return \"Done\";\n    }\n\n    private void processFor(int windowSize, ArrayList<String> tokenizedCode) {\n        for (int j = 0; j < tokenizedCode.size() - windowSize + 1; j++) {\n            WordContextDTO wordContext = WordContextDTOProcessor.processWordContext(tokenizedCode, windowSize, j);\n            if (wordContext == null) continue;\n            tokenWebService.post(wordContext.context().replace(\" \", \",\"), wordContext.nextWord());\n        }\n    }\n\n    private static ArrayList<String> tokenizedCodeFor(Map<String, Object> event) {\n        return (ArrayList<String>) tokenizedCodeDeserializer.deserialize(jsonFor(event))\n                .getTokenizedCode();\n    }\n\n    private static String jsonFor(Map<String, Object> event) {\n        return S3_SERVICE.getObjectFrom(bucket(event).get(\"name\"), object(event).get(\"key\"));\n    }\n\n    private static Map<String, String> object(Map<String, Object> event) {\n        return (Map<String, String>) ((Map<String, Object>) firstRecord(event).get(\"s3\")).get(\"object\");\n    }\n\n    private static Map<String, String> bucket(Map<String, Object> event) {\n        return (Map<String, String>) ((Map<String, Object>) firstRecord(event).get(\"s3\")).get(\"bucket\");\n    }\n\n    private static Map<String, Object> firstRecord(Map<String, Object> event) {\n        return ((List<Map<String, Object>>) event.get(\"Records\")).get(0);\n    }\n\n}\n\n"}